#ifndef _OSGVIEWWIDGET_H_
#define _OSGVIEWWIDGET_H_

#include "osgQOpenGL/osgQOpenGLWidget"
#include "osgGA/CameraManipulator"
#include "osgGA/StandardManipulator"
#include "osgGA/OrbitManipulator"
namespace osg
{
    class Node;
}

/*
 *  Qt Widget For Osg Scene Display.
 * 
 */ 
class  OsgViewerWidget : public osgQOpenGLWidget
{
    Q_OBJECT

public:
    OsgViewerWidget(QWidget* parent, osg::Node* scene = 0L);

    virtual ~OsgViewerWidget();   

protected:
    void initializeGL() override;

    void CreateViewer();
};


class TestCameraManipulator : public osgGA::CameraManipulator
{
public:
    TestCameraManipulator(osg::Node *node);
    ~TestCameraManipulator() = default;

    virtual void setByMatrix(const osg::Matrixd &matrix){}
    virtual void setByInverseMatrix(const osg::Matrixd &matrix){}
    virtual osg::Matrixd getMatrix()const {return osg::Matrixd();}
    virtual osg::Matrixd getInverseMatrix()const;

    float getFusionDistanceValue() const { return 25; }
    osgUtil::SceneView::FusionDistanceMode getFusionDistanceMode() const
    {
        return osgUtil::SceneView::USE_FUSION_DISTANCE_VALUE;
    }
    virtual bool handle(const osgGA::GUIEventAdapter& ea,osgGA::GUIActionAdapter& us);

private:
    osg::Vec3  _eye ;
    osg::Vec3  _dir ;
    osg::Vec3  _up  ;
    osg::Node *_root;
};


#endif